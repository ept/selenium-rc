


QuickGuide for writing a Selenium Driver


Implement a Dispatcher class:

    2 blocking queues:
        1) commands to execute
        2) collected results from previously executed commands
        
    Adder and getter methods for adding and getting to the two queues
    
    A "driver" method that takes requests from a web browser.
        This method will post one result to the result queue and get one 
        command to execute from the command queue
        
        
Implement an Interpreter class:
    The Interpreter class implements methods for translating API calls in your language into Selenese commands.
    
    	For example, an API call may look like this in your language:
        # Python example:
        print selenium.verifyText('link', 'Click here for next page')
        
        Which gets translated by Interpreter into the following Selenese string:
        '|verifyText|link|Click here for next page|'

    The Interpreter class inherits from the Dispatcher class.
    
    All web requests and API requests are posted to an instance of the interpreter class, which in turn
	add and gets to the appropriate queues via the dispatcher.
                
    commands = ['chooseCancelOnNextConfirmation',
                'click',
                'clickAndWait',
                'open',
                'pause',
                'selectAndWait',
                'selectWindow',
                'setTextField',
                'storeText',
                'storeValue',
                'testComplete',
                'type',
                'typeAndWait',
                'verifyAlert',
                'verifyAttribute',
                'verifyConfirmation',
                'verifyElementNotPresent',
                'verifyElementPresent',
                'verifyLocation',
                'verifySelectOptions',
                'verifySelected',
                'verifyTable',
                'verifyText',
                'verifyTextPresent',
                'verifyTitle',
                'verifyValue']


You'll need to mount the the javascripts directory from the Selenium source  so its files and all 
sub-directories' files are gettable and postable from a web request.                
You can either mount these directories in a web server implemented in your language, or provide equivalent setup instructions for the most common web servers (Apache or Microsoft IIS)

