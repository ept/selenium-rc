=========================
Selenium Reference
=========================

    A **command** is what tells Selenium what to do. Selenium commands come in two 'flavors', **Actions** and **Assertions**.
    Each command call is one line in the test table of the form:

        ======= ====== =====
        command target value
        ======= ====== =====

    **Actions** are commands that generally manipulate the state of the application. They do things like "click this link" and "select that option". If an Action fails, or has an error, the execution of the current test is stopped.

    **Checks** verify the state of the application conforms to what is expected. Examples include "make sure the page title is X" and "check that this checkbox is checked". It is possible to tell Selenium to stop the test when an Assertion fails, or to simply record the failure and continue.

    **Element Locators** tell Selenium which HTML element a command refers to. Many commands require an Element Locator as the "target" attribute. Examples of Element Locators include "elementId" and "document.forms[0].element". These are described more clearly in the next section.

-----------
Test Tables
-----------

    The test tables are simple html tables with 3 columns: command, target, value.  Not all commands take a value, however.  In this case either leave the column blank or use a &nbsp; to make the table look better.

    The first row will be ignored by Selenium, so this can be used for a title or any other information.

    Example:

        ==========  ============    ==========
        Simple Test Table
        --------------------------------------
        open        /mypage     
        type        nameField       John Smith
        click       submitButton    True
        verifyText  name            John Smith
        ==========  ============    ==========

-----------------
Element Locators
-----------------

    Element Locators allow Selenium to identify which HTML element a command refers to. There are several forms of Element Locators.

    **Identifier:** locates an element based on the id or name attribute of the element. If an element with a matching *id* is found, it is chosen. Otherwise, the first element with a matching *name* is chosen.

    **DOM:** finds an element using the built-in DOM traversal syntax of HTML. DOM Traversal locators *must* begin with "document.".

    **XPath:** locates an element using a defined XPath expression. XPath locators *must* begin with "//".

    Locator examples:

        =============  ===================================
        Locator Type   Example
        -------------  -----------------------------------
        Identifier     elementId
        DOM            document.forms['myForm'].myDropdown
        DOM            document.images[56]
        XPath          //img[@alt='The image alt text']
        XPath          //table[@id='table1']//tr[4]/td[2]
        =============  ===================================


----------------
Selenium Actions
----------------

    Actions tell Selenium to do something in the application. They generally represent something a user would do.

    Many **Actions** can be called with the "AndWait" suffix. This suffix tells Selenium that the action will cause the browser to make a call to the server, and that Selenium should wait for a new page to load.
    The exceptions to this pattern are the "open" and "click" actions, which will both wait for a page to load by default.

    **open**
        Opens a URL in the test frame.  This accepts both relative and absolute URLs.
        
        *Note*: The URL must be on the same site as Selenium due to security restrictions in the browser (Cross Site Scripting).
        
        **target:** The URL to open.
        
        **value:** *ignored*
        
        **examples:**
            
            ====  =================  =====
            open  /mypage
            open  http://localhost/
            ====  =================  =====

    **click**
        Clicks on a link, button, checkbox or radio button.  By default, this command waits for a new page to load before continuing.
        
        **target:** The id of the element that should be clicked.
        
        **value** (*optional*) **:** nowait - Tells Selenium that it should not wait for a page to load before continuing.
        
        **examples:**
            
            =====   ==================  =====
            click   someLink
            click   buttonA
            click   linkWithJavascript  nowait
            click   someCheckbox        nowait
            =====   ==================  =====

    **type (typeAndWait)**
        Types (enters) text into an input field.  This works for text fields, combo boxes, check boxes, etc.
        
        **target:** The id of the element where the text should be typed.
        
        **value:** The text that will be typed, or the value of the option selected (not the visible text).
        
        **examples:**
            
            ===========    ==========================   ==========
            type           nameField                    John Smith
            typeAndWait    textBoxThatSubmitsOnChange   newValue
            ===========    ==========================   ==========

    **select (selectAndWait)**
        Select an option from a drop-down, based on the option label.

        **target:** The id of the drop-down.

        **value:** The label of the option to be selected.

        **examples:**

            =============  ================   ==========
            select         dropDown           First Option
            selectAndWait  currencySelector   Australian Dollars
            =============  ================   ==========

    **selectWindow**
        Selects a popup window.  Once a popup window has been selected, all commands go to that window.  To select the main window again, use "null" as the target.
        
        **target:** The id of the window to select.
        
        **value:** *ignored*
        
        **examples:**
            
            ============    =============   =====
            selectWindow    myPopupWindow   
            selectWindow    null
            ============    =============   =====

    **pause**
        Pauses the execution of the test script for a specified amount of time.  This is useful for debugging a script or pausing to wait for some server side action.
        
        **target:** The number of milliseconds to pause.
        
        **value:** *ignored*
        
        **examples:**
            
            =====   ====  =====
            pause   5000
            pause   2000    
            =====   ====  =====

    **storeValue**

        Stores the value of an input field into a variable. 

        **target:** The id of the input field.

        **value:** Name of the variable to store the field value into.

        **examples:**

            ==========   =========  =========
            storeValue   userName   userID
            type         userName   ${userID}
            ==========   =========  =========

    **storeText**

        Stores the text of an element into a variable. 

        **target:** The id of the element.

        **value:** Name of the variable to store the element text into.

        **examples:**

            ===========   ===========   ====================
            storeText     currentDate   expectedStartDate
            verifyValue   startDate     ${expectedStartDate}
            ===========   ===========   ====================

---------------
Selenium Checks
---------------
    Checks are used to verify the state of the application. They can be used to check the value of a form field, the presense of some text, or the URL of the current page.

    All Selenium Checks can be used in 2 modes, "assert" and "verify". These behave identically, except that when an "assert" check fails, the test is aborted. When a "verify" check fails, the test will continue execution.
    This allows a single "assert" to ensure that the application is on the correct page, followed by a bunch of "verify" checks to test form field values, labels, etc.

    **verifyLocation / assertLocation**
        Verifies the location of the current page being tested.
        
        **target:** The expected relative location of the page.
        
        **value:** *ignored*
        
        **examples:**
            
            ==============   =======  =====
            verifyLocation   /mypage
            assertLocation   /mypage
            ==============   =======  =====

    **verifyTitle / assertTitle**
        Verifies the title of the current page.

        **target:** The expected page title.

        **value:** *ignored*

        **examples:**

            ===========   =======  =====
            verifyTitle   My Page
            assertTitle   My Page
            ===========   =======  =====

    **verifyValue / assertValue**
        Verifies the value of an input field (or anything else with a value parameter). For checkbox/radio elements, the value will be "on" or "off" depending on whether the element is checked or not.
        
        **target:** The id of the element to verify.
        
        **value:** The expected value.
        
        **examples:**
            
            ===========   ===========================   ==========
            verifyValue   nameField                     John Smith
            assertValue   document.forms[2].nameField   John Smith
            ===========   ===========================   ==========

    **verifySelected / assertSelected**
        Verifies the label of the selected option of a drop-down.

        **target:** Locates the drop-down to verify.

        **value:** The expected label of the selected option.

        **examples:**

            ==============   ===========================   ==========
            verifySelected   dropdown2                     John Smith
            assertSelected   document.forms[2].dropDown    John Smith
            ==============   ===========================   ==========

    **verifySelectOptions / assertSelectOptions**
        Verifies the labels of all options in a drop-down against a comma-separated list. Commas in an expected option can be escaped as "\,".

        **target:** Locates the drop-down to verify.

        **value:** A comma-separated list of option labels.

        **examples:**

            ===================   ===========================   ====================
            verifySelectOptions   dropdown2                     John Smith,Dave Bird
            assertSelectOptions   document.forms[2].dropDown    Smith\\, J,Bird\\, D
            ===================   ===========================   ====================

    **verifyText / assertText**
        Verifies the text of an element.  This works for any element that contains text.  This command uses either the textContent (Mozilla-like browsers) or the innerText (IE-like browsers) of the element, which is the rendered text shown to the user.
        
        **target:** The id of the element to verify.
        
        **value:** The expected text.
        
        **examples:**
            
            ==========   ====================   ==========
            verifyText   statusMessage          Successful
            assertText   //div[@id='foo']//h1   Successful
            ==========   ====================   ==========

    **verifyAttribute / assertAttribute**
        Verifies the value of an element attribute. An attribute is identified using the syntax <element-locator>@<attribute-name>. This works for all types of element locators.

        **target:** A locator string of the format <element-locator>@<attribute-name>

        **value:** The expected attribute value.

        **examples:**

            ===============   ======================   ==========
            verifyAttribute   txt1@class               bigAndBold
            assertAttribute   document.images[0]@alt   alt-text
            verifyAttribute   //img[@id='foo']/@alt    alt-text
            ===============   ======================   ==========

    **verifyTextPresent / assertTextPresent**
        Verifies that the specified text appears somewhere on the rendered page shown to the user.
        
        **target:** The text that should be present.
        
        **value:** *ignored*
        
        **examples:**
            
            =================   ======================   =====
            verifyTextPresent   You are now logged in.
            assertTextPresent   You are now logged in.
            =================   ======================   =====

    **verifyElementPresent / assertElementPresent**
        Verifies that the specified element is somewhere on the page.
        
        **target:** The element that should be present.
        
        **value:** *ignored*
        
        **examples:**
            
            ====================   =================   =====
            verifyElementPresent   submitButton
            assertElementPresent   //img[@alt='foo']
            ====================   =================   =====

    **verifyElementNotPresent / assertElementNotPresent**
        Verifies that the specified element is not on the page.
        
        **target:** The element that should not be present.
        
        **value:** *ignored*
        
        **examples:**
            
            =======================   ============   =====
            verifyElementNotPresent   cancelButton
            assertElementNotPresent   cancelButton
            =======================   ============   =====

    **verifyTable / assertTable**
        Verifies the text in a cell of a table. The correct syntax of the target is tableName.row.column, where row and column start at 0.
        
        **target:** The table, row, and column specified as table.row.col.
        
        **value:** The expected value of the cell.
        
        **examples:**
            
            ===========   ===========   =========
            verifyTable   myTable.1.6   Submitted
            assertTable   results.0.2   13
            ===========   ===========   =========

    **verifyVisible / assertVisible**
        Verifies that the specified element is both present *and* visible. An element can be rendered invisible by setting the CSS "visibility" property to "hidden", or the "display" property to "none", either for the element itself or one if its ancestors.
        
        **target:** The element that should be visible.
        
        **value:** *ignored*
        
        **examples:**
            
            =============   ========   =====
            verifyVisible   postcode
            assertVisible   postcode
            =============   ========   =====

    **verifyNotVisible / assertNotVisible**
        Verifies that the specified element is not visible.  Elements that are simply not present are also considered invisible.
        
        **target:** The element that should not be visible.
        
        **value:** *ignored*
        
        **examples:**
            
            ================   ========   =====
            verifyNotVisible   postcode
            assertNotVisible   postcode
            ================   ========   =====


-----------------
Variables
-----------------

    Selenium can handle simple variables.  A variable is stored with the storeValue or storeText commands.  Later, it can be used in the target or value column with the syntax: ${variableName}.

    Example:

        ==========   ====================   ==========
        Variable Test
        ----------------------------------------------
        open         /page1     
        storeValue   nameField              myVar
        open         /page2
        type         nameField              ${myVar}
        open         /login?user=${myVar}
        ==========   ====================   ==========
    
    Functions can also be applied to variables.  Just append a "." and the function call to the variable reference.

    Example:

        ====   =========   ======================
        type   nameField   ${myVar}.toUpperCase()
        ====   =========   ======================


-----------------
SetUp / TearDown
-----------------

    There are no setUp and tearDown commands in Selenium, but there is a way to handle these common testing operations.  On the site being tested, create URLs for setUp and tearDown.  Then, when the test runner opens these URLs, the server can do whatever setUp or tearDown is necessary.

    Example:
    
        For the T&E project, we wanted the functional tests to run as a dummy user.  Therefore, we made a /setUpFT URL that would create a dummy user and write the userID to the page.  Then, we can store this value (using the command storeValue) and use it in the script.  Finally, we made a /tearDownFT URL which takes the dummy userID as a parameter and deletes the user.  Therefore, our tests look like this:

        ==========   ============================   ==========
        Setup and Teardown
        ------------------------------------------------------
        open         /setUpFT     
        storeValue   userid
        open         /login
        type         userID                         ${userid}
        click        submit
        open         /tearDownFT?userid=${userid}
        ==========   ============================   ==========


----------------------
Continuous Integration
----------------------
    
    Selenium can be integrated with an automated build.  When the parameter "auto=true" is added to the URL, Selenium will run the entire suite of tests, and then post the results to the URL /postResults.  The fields of the post are:

        ==================  ======================================================================================================  
        Parameter           Description
        ==================  ======================================================================================================
        result              the word "passed" or "failed" depending on whether the whole suite passed or at least one test failed.
        totalTime           the time in seconds for the whole suite to run
        numTestPasses       tht total number of tests which passed
        numTestFailures     the total number of tests which failed.
        numCommandPasses    the total number of commands which passed.
        numCommandFailures  the total number of commands which failed.
        numCommandErrors    the total number of commands which errored.
        suite               the suite table, including the hidden column of test results
        testTable.1         the first test table
        testTable.2         the second test table
        ...                 ...
        testTable.N         The Nth test table
        ==================  ======================================================================================================

    Therefore, the steps for continuous integration are:
        1. Create a servlet-type application at the url /postResults which can read the parameters above and write them to a file
        2. Create a script which can start up a brower and send to to the URL: selenium?auto=true
            - Generally, this can be done by merely calling the browser with the URL as an argument:
                firefox.exe http://localhost/selenium?auto=true
        3. Make your continuous build:
            - Call the script from step 2, preferably using more than one browser
            - Wait for it to finish, possibly by checking for the existence of the file(s) from step 1
            - Parse these files to determine whether the build passed or failed
            - Act accordingly (send emails, update a build web page, etc.)
        

------------------

:Authors:           Paul Gross, Jason Huggins
:Created Date:      08/23/2004
:Modified Date:     11/04/2004
:Created With:      reStructuredText: http://docutils.sourceforge.net/rst.html
