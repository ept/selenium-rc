<project name="selenium-rc-clients" default="dist" xmlns:maven="urn:maven-artifact-ant">

    <property name="version" value="0.9.1-SNAPSHOT"/>

    <condition property="property.file.name" value="build.windows.properties">
        <os family="windows" />
    </condition>
    <condition property="property.file.name" value="build.unix.properties">
        <os family="unix" />
    </condition>
    <property file="../${property.file.name}" />

    <condition property="website.root" value="${ant.file.selenium-rc-clients}/../../website">
        <available file="${ant.file.selenium}/../../website"/>
    </condition>

    <target name="all" depends="test, dist" />

    <target name="clean" depends="clean-dotnet, clean-python, clean-ruby, clean-perl, clean-php">
        <delete dir="dist-image"/>
        <delete dir="dist-doc"/>
        <delete dir="dist"/>
        <delete>
            <fileset dir="." includes="iedoc.xml" />
        </delete>
    </target>

    <target name="dist" depends="dist-java, dist-dotnet, dist-ruby, dist-python, dist-perl, dist-php, dist-doc">
        <property name="src.release" value="selenium-remote-control-${version}"/>
        <mkdir dir="dist/nightly" />
        <zip zipfile="dist/nightly/${src.release}.zip">
            <zipfileset dir="dist-image" prefix="${src.release}" />
        </zip>
    </target>

    <target name="dist-dirs">
        <mkdir dir="dist-image"/>
        <mkdir dir="dist-doc"/>
        <mkdir dir="dist"/>
    </target>

    <target name="dist-doc" depends="dist-java, dist-dotnet, dist-ruby, dist-php, dist-python, dist-perl">
        <macrodef name="copy-doc">
            <attribute name="dir" />
            <sequential>
                <mkdir dir="dist/nightly/doc"/>
                <copy todir="dist/nightly/doc/@{dir}">
                    <fileset dir="dist-image/@{dir}/doc" />
                </copy>
            </sequential>
        </macrodef>
        <copy-doc dir="server" />
        <copy-doc dir="java" />
        <copy-doc dir="dotnet" />
        <copy-doc dir="ruby" />
        <copy-doc dir="python" />
        <copy-doc dir="perl" />
        <copy-doc dir="php" />
    </target>

    <target name="dist-ruby" depends="dist-dirs">
        <copy todir="dist-image/ruby">
            <fileset dir="ruby">
                <include name="*.rb"/>
                <include name="doc/**" />
            </fileset>
        </copy>

        <property name="ruby.release" value="selenium-ruby-client-driver-${version}"/>
        <zip zipfile="dist/${ruby.release}.zip">
            <zipfileset dir="dist-image/ruby" prefix="${ruby.release}"/>
        </zip>
    </target>

    <target name="dist-php" depends="dist-dirs">
        <copy todir="dist-image/php">
            <fileset dir="php">
                <include name="PEAR/**"/>
                <include name="*.php"/>
                <include name="doc/**" />
            </fileset>
        </copy>

        <property name="php.release" value="selenium-php-client-driver-${version}"/>
        <zip zipfile="dist/${php.release}.zip">
            <zipfileset dir="dist-image/php" prefix="${php.release}"/>
        </zip>
    </target>

    <target name="dist-perl" depends="dist-dirs">
        <copy todir="dist-image/perl">
            <fileset dir="perl">
                <include name="Makefile.PL"/>
                <include name="Changes"/>
                <include name="todo.txt"/>
                <include name="inc/**"/>
                <include name="lib/**"/>
                <include name="t/**"/>
                <exclude name="mypod2html.pl" />
                <include name="doc/**" />
            </fileset>
        </copy>

        <property name="perl.release" value="selenium-perl-client-driver-${version}"/>
        <zip zipfile="dist/${perl.release}.zip">
            <zipfileset dir="dist-image/perl" prefix="${perl.release}"/>
        </zip>
    </target>

    <target name="dist-python" depends="dist-dirs">
        <copy todir="dist-image/python">
            <fileset dir="python">
                <include name="*.py"/>
                <exclude name="mypydoc.py"/>
                <include name="doc/**" />
            </fileset>
        </copy>

        <property name="python.release" value="selenium-python-client-driver-${version}"/>
        <zip zipfile="dist/${python.release}.zip">
            <zipfileset dir="dist-image/python" prefix="${python.release}"/>
        </zip>
    </target>

    <target name="maven-tasks-base">
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
            <classpath>
                <pathelement location="maven-artifact-ant-2.0.2-dep.jar" />
            </classpath>
        </typedef>
        <maven:remoteRepository id="openqa" url="http://maven.openqa.org" />
    </target>
    
    <target name="custom-repo" depends="maven-tasks-base" if="custom.maven.repo">
        <property name="maven.repo.local" value="${custom.maven.repo}"/>
        <presetdef name="mavendeps">
            <maven:dependencies>
                <localRepository location="${custom.maven.repo}" />
                <remoteRepository refid="openqa" />
            </maven:dependencies>
        </presetdef>
    </target>
    
    <target name="default-repo" depends="maven-tasks-base" unless="custom.maven.repo">
        <property name="maven.repo.local" value="${user.home}/.m2/repository"/>
        <presetdef name="mavendeps">
            <maven:dependencies>
                <remoteRepository refid="openqa" />
            </maven:dependencies>
        </presetdef>
    </target>

    <target name="maven-tasks" depends="custom-repo,default-repo">
        <macrodef name="find-maven-jar">
            <attribute name="groupId" />
            <attribute name="artifactId" />
            <attribute name="version" default="${version}" />
            <sequential>
                <mavendeps pathId="@{artifactId}.classpath">
                    <dependency groupId="@{groupId}" artifactId="@{artifactId}" version="@{version}" scope="runtime"/>
                </mavendeps>
                <mkdir dir="dist" />
                <echo message="@{groupId}" file="dist/groupId.txt" />
                <replace file="dist/groupId.txt" token="." value="/" />
                <loadfile srcfile="dist/groupId.txt" property="@{groupId}.munged" />
                <property name="@{artifactId}.jar" location="${maven.repo.local}/${@{groupId}.munged}/@{artifactId}/@{version}/@{artifactId}-@{version}.jar" />
                <condition property="build.failed">
                    <not><available file="${@{artifactId}.jar}" /></not>
                </condition>
                <fail if="build.failed" message="Couldn't find ${@{artifactId}.jar}" />
                <echo message="@{artifactId}.jar = ${@{artifactId}.jar}" />
            </sequential>
        </macrodef>
    </target>

    <target name="find-server" depends="maven-tasks" unless="${selenium-server.jar}">
        <find-maven-jar groupId="org.openqa.selenium.server" artifactId="selenium-server" />
    </target>
    
    <target name="find-server-standalone" depends="find-server" unless="${selenium-server-standalone.jar}">
        <dirname property="selenium-server.dirname" file="${selenium-server.jar}" />
        <basename property="selenium-server.basename" file="${selenium-server.jar}" suffix="jar" />
        <property name="selenium-server-standalone.jar" location="${selenium-server.dirname}/${selenium-server.basename}-standalone.jar" />
        <condition property="build.failed">
            <not><available file="${selenium-server-standalone.jar}" /></not>
        </condition>
        <fail if="build.failed" message="Couldn't find ${selenium-server-standalone.jar}" />
    </target>
    
    <target name="find-server-coreless" depends="maven-tasks" unless="${selenium-server-coreless.jar}">
        <find-maven-jar groupId="org.openqa.selenium.server" artifactId="selenium-server-coreless" />
    </target>
    
    <target name="find-java-client" depends="maven-tasks">
        <find-maven-jar groupId="org.openqa.selenium.client-drivers" artifactId="selenium-java-client-driver" />
    </target>
    
    <target name="start-server" depends="find-server-standalone">
        <!-- Configurable server default firefox location; if this doesn't work, we'll just try to run it off the path -->
        <echo message="starting server...."/>
        <echo message="firefox.location = ${firefox.location}"/>
        <echo message="opera.location = ${opera.location}"/>
        <java jar="${selenium-server-standalone.jar}" fork="true" spawn="true">
            <sysproperty key="firefoxDefaultPath" file="${firefox.location}" />
            <sysproperty key="operaDefaultPath" file="${opera.location}" />
        </java>
        <echo message="Starting: ${selenium-server-standalone.jar}" />
        <sleep seconds="2"/>
    </target>
    
    <target name="extract-xml" depends="find-server-standalone">
        <property name="output.path" location="${basedir}" />
        <whichresource resource="/core/iedoc.xml" property="iedoc.url" classpath="${selenium-server-standalone.jar}"/>
        <fail unless="iedoc.url" message="Couldn't find iedoc.xml in the classpath: ${selenium-server-standalone.jar}" />
        <!--<echo message="iedoc.url = ${iedoc.url}" />-->
        <get src="${iedoc.url}" dest="${output.path}/iedoc.xml" />
        <property name="iedoc.xml" location="${output.path}/iedoc.xml" />
    </target>
    
    <target name="stop-server">
        <get taskname="selenium-shutdown" src="http://localhost:4444/selenium-server/driver/?cmd=shutDown" dest="result.txt" ignoreerrors="true" />
        <echo taskname="selenium-shutdown" message="DGF Errors during shutdown are expected" />
    </target>
    
    <target name="test" depends="test-dotnet, test-ruby, test-python, test-perl, test-php"/>
    
    <target name="clean-python">
        <ant dir="python" target="clean"/>
    </target>
    
    <target name="test-python">
        <echo message="python executable = ${python.executable}" />
        <ant dir="python" target="all"/>
    </target>
    
    <target name="clean-perl">
        <ant dir="perl" target="clean"/>
    </target>
    
    <target name="test-perl">
        <echo message="perl executable = ${perl.executable}" />
        <ant dir="perl" target="all"/>
    </target>
    
    <target name="clean-dotnet">
        <ant dir="dotnet" target="clean"/>
    </target>
        
    <target name="test-dotnet">
        <ant dir="dotnet" target="test"/>
    </target>
        
    <target name="dist-dotnet" depends="dist-dirs">
        <ant dir="dotnet" target="dist"/>
        <property name="dotnet.release" value="selenium-dotnet-client-driver-${version}" />
        <zip destfile="dist/${dotnet.release}.zip">
            <zipfileset dir="dotnet/build/dist" prefix="${dotnet.release}">
                <include name="**/*" />
            </zipfileset>
        </zip>
        <mkdir dir="dist-image/dotnet" />
        <copy todir="dist-image/dotnet">
            <fileset dir="dotnet/build/dist" />
        </copy>
    </target>
    
    <target name="dist-java" depends="dist-dirs, find-server, find-server-coreless, find-java-client">
        <mkdir dir="dist-image/server" />
        <mkdir dir="dist-image/server/source" />
        <mkdir dir="dist-image/server/doc" />
        <copy file="${selenium-server-standalone.jar}" tofile="dist-image/server/selenium-server.jar" />
        <copy file="${selenium-server-coreless.jar}/../selenium-server-coreless-${version}-tests.jar"
            tofile="dist-image/server/selenium-server-tests.jar" />
        <unzip src="${selenium-server-coreless.jar}/../selenium-server-coreless-${version}-sources.jar" dest="dist-image/server/source/main" />
        <unzip src="${selenium-server-coreless.jar}/../selenium-server-coreless-${version}-test-sources.jar" dest="dist-image/server/source/test" />
        
        <mkdir dir="dist-image/java" />
        <mkdir dir="dist-image/java/source" />
        <mkdir dir="dist-image/java/doc" />
        <copy file="${selenium-java-client-driver.jar}" tofile="dist-image/java/selenium-java-client-driver.jar" />
        <copy file="${selenium-java-client-driver.jar}/../selenium-java-client-driver-${version}-tests.jar"
            tofile="dist-image/java/selenium-java-client-driver-tests.jar" />
        <unzip src="${selenium-java-client-driver.jar}/../selenium-java-client-driver-${version}-javadoc.jar" dest="dist-image/java/doc" />
        <unzip src="${selenium-java-client-driver.jar}/../selenium-java-client-driver-${version}-sources.jar" dest="dist-image/java/source/main" />
        <unzip src="${selenium-java-client-driver.jar}/../selenium-java-client-driver-${version}-test-sources.jar" dest="dist-image/java/source/test" />
        <copy file="${selenium-server-standalone.jar}" tofile="dist-image/java/source/test/selenium-server.jar" />
        <copy file="java/easymode/main.project" tofile="dist-image/java/source/main/.project" />
        <copy file="java/easymode/main.classpath" tofile="dist-image/java/source/main/.classpath" />
        <copy file="java/easymode/test.project" tofile="dist-image/java/source/test/.project" />
        <copy file="java/easymode/test.classpath" tofile="dist-image/java/source/test/.classpath" />
    </target>
    
    <target name="pull-jars" depends="maven-tasks">
        <mavendeps pathId="pull">
            <dependency groupId="org.openqa.selenium.server" artifactId="selenium-server" version="${version}" scope="runtime" />
            <dependency groupId="org.openqa.selenium.server" artifactId="selenium-server-coreless" version="${version}" scope="runtime" />
            <dependency groupId="org.openqa.selenium.client-drivers" artifactId="selenium-java-client-driver" version="${version}" scope="runtime" />
        </mavendeps>
    </target>
    
    <target name="test-ruby">
        <ant dir="ruby" target="all"/>
    </target>
    
    <target name="clean-ruby">
        <ant dir="ruby" target="clean"/>
    </target>
    
    <target name="test-php">
        <ant dir="php" target="all"/>
    </target>
    
    <target name="clean-php">
        <ant dir="php" target="clean"/>
    </target>



</project>
