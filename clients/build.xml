<project name="selenium-rc-clients" default="dist" xmlns:maven="urn:maven-artifact-ant">

    <property name="version" value="0.7.2-SNAPSHOT"/>
    <condition property="website.root" value="${ant.file.selenium-rc-clients}/../../website">
        <available file="${ant.file.selenium}/../../website"/>
    </condition>

	<target name="all" depends="test, dist" />

    <target name="clean" depends="clean-dotnet, clean-python, clean-ruby, clean-perl">
        <delete dir="dist-image"/>
        <delete dir="dist-doc"/>
        <delete dir="dist"/>
        <delete>
        	<fileset dir="." includes="iedoc.xml" />
        </delete>
    </target>

    <target name="dist" depends="dist-java, dist-dotnet, dist-ruby, dist-python, dist-perl, dist-doc">
    	<property name="src.release" value="selenium-remote-control-${version}"/>
    	<zip zipfile="dist/${src.release}.zip">
    		<zipfileset dir="dist-image" prefix="${src.release}" />
    	</zip>
    </target>

    <target name="dist-dirs">
        <mkdir dir="dist-image"/>
        <mkdir dir="dist-doc"/>
        <mkdir dir="dist"/>
    </target>

	<target name="dist-doc" depends="dist-java, dist-dotnet, dist-ruby, dist-python, dist-perl">
	    <macrodef name="copy-doc">
	    	<attribute name="dir" />
	    	<sequential>
			    <copy todir="dist-doc/@{dir}">
			        <fileset dir="dist-image/@{dir}/doc" />
			    </copy>
			</sequential>
		</macrodef>
		<copy-doc dir="server" />
		<copy-doc dir="java" />
		<copy-doc dir="dotnet" />
		<copy-doc dir="ruby" />
		<copy-doc dir="python" />
		<copy-doc dir="perl" />
	</target>

    <target name="dist-ruby" depends="dist-dirs">
        <copy todir="dist-image/ruby">
            <fileset dir="ruby">
                <include name="*.rb"/>
                <include name="doc/**" />
            </fileset>
        </copy>

        <property name="ruby.release" value="selenium-ruby-client-driver-${version}"/>
        <zip zipfile="dist/${ruby.release}.zip">
            <zipfileset dir="dist-image/ruby" prefix="${ruby.release}"/>
        </zip>
    </target>

	<target name="dist-perl" depends="dist-dirs">
        <copy todir="dist-image/perl">
            <fileset dir="perl">
            	<include name="Makefile.PL"/>
            	<include name="Changes"/>
            	<include name="todo.txt"/>
            	<include name="inc/**"/>
            	<include name="lib/**"/>
            	<include name="t/**"/>
                <exclude name="mypod2html.pl" />
                <include name="doc/**" />
            </fileset>
        </copy>

        <property name="perl.release" value="selenium-perl-client-driver-${version}"/>
        <zip zipfile="dist/${perl.release}.zip">
            <zipfileset dir="dist-image/perl" prefix="${perl.release}"/>
        </zip>
    </target>

	<target name="dist-python" depends="dist-dirs">
        <copy todir="dist-image/python">
            <fileset dir="python">
                <include name="*.py"/>
                <exclude name="mypydoc.py"/>
                <include name="doc/**" />
            </fileset>
        </copy>

        <property name="python.release" value="selenium-python-client-driver-${version}"/>
        <zip zipfile="dist/${python.release}.zip">
            <zipfileset dir="dist-image/python" prefix="${python.release}"/>
        </zip>
    </target>

	<target name="maven-tasks-base">
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
			<classpath>
				<pathelement location="maven-artifact-ant-2.0.2-dep.jar" />
			</classpath>
		</typedef>
		<maven:remoteRepository id="openqa" url="http://maven.openqa.org" />
	</target>
	
	<target name="custom-repo" depends="maven-tasks-base" if="custom.maven.repo">
		<presetdef name="mavendeps">
			<maven:dependencies>
				<localRepository location="${custom.maven.repo}" />
				<remoteRepository refid="openqa" />
			</maven:dependencies>
		</presetdef>
	</target>
	
	<target name="default-repo" depends="maven-tasks-base" unless="custom.maven.repo">
		<presetdef name="mavendeps">
			<maven:dependencies>
			    <remoteRepository refid="openqa" />
			</maven:dependencies>
		</presetdef>
	</target>

	<target name="maven-tasks" depends="custom-repo,default-repo">
		<macrodef name="find-maven-jar">
			<attribute name="groupId" />
			<attribute name="artifactId" />
			<attribute name="version" default="${version}" />
			<sequential>
				<mavendeps pathId="@{artifactId}.classpath">
					<dependency groupId="@{groupId}" artifactId="@{artifactId}" version="@{version}" scope="runtime"/>
				</mavendeps>
				<pathconvert targetos="windows" property="@{artifactId}.string" refid="@{artifactId}.classpath" />
				<condition property="build.failed">
					<contains string="${@{artifactId}.string}" substring=";" />
				</condition>
				<fail if="build.failed" message="Maven gave us more than one @{artifactId} jar: ${@{artifactId}.string}" />
				<condition property="@{artifactId}.jar" value="${@{artifactId}.string}">
				    <available file="${@{artifactId}.string}" />
				</condition>
				<property name="@{artifactId}.jar" location="${@{artifactId}.string}/../../@{version}/@{artifactId}-@{version}.jar" />
				<condition property="build.failed">
				    <not><available file="${@{artifactId}.jar}" /></not>
				</condition>
				<fail if="build.failed">Maven gave us a bad path to Selenium Server: ${@{artifactId}.jar}</fail>
			</sequential>
		</macrodef>
	</target>

    <target name="find-server" depends="maven-tasks" unless="${selenium-server.jar}">
		<find-maven-jar groupId="org.openqa.selenium.server" artifactId="selenium-server" />
	</target>
	
	<target name="find-java-client" depends="maven-tasks">
		<find-maven-jar groupId="org.openqa.selenium.client-drivers" artifactId="selenium-java-client-driver" />
	</target>
	
	<target name="start-server" depends="find-server">
		<!-- Configurable server default firefox location; if this doesn't work, we'll just try to run it off the path -->
		<property name="firefox.location" location="c:\program files\mozilla firefox\firefox.exe" />
		<property name="opera.location" location="c:\program files\opera\opera.exe" />
		<java jar="${selenium-server.jar}" fork="true" spawn="true">
			<sysproperty key="firefoxDefaultPath" file="${firefox.location}" />
			<sysproperty key="operaDefaultPath" file="${opera.location}" />
		</java>
		<echo message="Starting: ${selenium-server.jar}" />
    </target>
    
    <target name="extract-xml" depends="find-server">
    	<property name="output.path" location="${basedir}" />
    	<whichresource resource="/core/iedoc.xml" property="iedoc.url" classpath="${selenium-server.jar}"/>
		<fail unless="iedoc.url" message="Couldn't find iedoc.xml in the classpath: ${selenium-server.jar}" />
		<!--<echo message="iedoc.url = ${iedoc.url}" />-->
		<get src="${iedoc.url}" dest="${output.path}/iedoc.xml" />
		<property name="iedoc.xml" location="${output.path}/iedoc.xml" />
    </target>
    
    <target name="stop-server">
    	<get taskname="selenium-shutdown" src="http://localhost:4444/selenium-server/driver/?cmd=shutDown" dest="result.txt" ignoreerrors="true" />
    	<echo taskname="selenium-shutdown" message="DGF Errors during shutdown are expected" />
    </target>
    
    <target name="test" depends="test-dotnet, test-ruby, test-python, test-perl"/>
    
    <target name="clean-python">
        <ant dir="python" target="clean"/>
    </target>
    
    <target name="test-python">
    	<echo message="python executable = ${python.executable}" />
        <ant dir="python" target="all"/>
    </target>
    
    <target name="clean-perl">
        <ant dir="perl" target="clean"/>
    </target>
    
    <target name="test-perl">
    	<echo message="perl executable = ${perl.executable}" />
        <ant dir="perl" target="all"/>
    </target>
    
    <target name="clean-dotnet">
        <ant dir="dotnet" target="clean"/>
    </target>
        
    <target name="test-dotnet">
        <ant dir="dotnet" target="test"/>
    </target>
        
    <target name="dist-dotnet" depends="dist-dirs">
		<ant dir="dotnet" target="dist"/>
		<property name="dotnet.release" value="selenium-dotnet-client-driver-${version}" />
		<zip destfile="dist/${dotnet.release}.zip">
			<zipfileset dir="dotnet/build/dist" prefix="${dotnet.release}">
				<include name="**/*" />
			</zipfileset>
		</zip>
		<mkdir dir="dist-image/dotnet" />
		<copy todir="dist-image/dotnet">
			<fileset dir="dotnet/build/dist" />
		</copy>
	</target>
	
	<target name="dist-java" depends="dist-dirs, find-server, find-java-client">
		<mkdir dir="dist-image/server" />
		<mkdir dir="dist-image/server/source" />
		<mkdir dir="dist-image/server/doc" />
		<copy file="${selenium-server.jar}" tofile="dist-image/server/selenium-server.jar" />
		<copy file="${selenium-server.jar}/../selenium-server-${version}-tests.jar"
			tofile="dist-image/server/selenium-server-tests.jar" />
		<copy todir="dist-image/server/source/src">
		    <fileset dir="../server/src" />
		</copy>
		<unzip src="${selenium-server.jar}/../selenium-server-${version}-javadoc.jar" dest="dist-image/server/doc" />
		
		<mkdir dir="dist-image/java" />
		<mkdir dir="dist-image/java/source" />
		<mkdir dir="dist-image/java/doc" />
		<copy file="${selenium-java-client-driver.jar}" tofile="dist-image/java/selenium-java-client-driver.jar" />
		<copy file="${selenium-java-client-driver.jar}/../selenium-java-client-driver-${version}-tests.jar"
			tofile="dist-image/java/selenium-java-client-driver-tests.jar" />
		<copy todir="dist-image/java/source">
		    <fileset dir="java/src" />
		</copy>
		<unzip src="${selenium-java-client-driver.jar}/../selenium-java-client-driver-${version}-javadoc.jar" dest="dist-image/java/doc" />
		<copy file="${selenium-server.jar}" tofile="dist-image/java/source/test/selenium-server.jar" />
		<copy file="java/easymode/main.project" tofile="dist-image/java/source/main/.project" />
		<copy file="java/easymode/main.classpath" tofile="dist-image/java/source/main/.classpath" />
		<copy file="java/easymode/test.project" tofile="dist-image/java/source/test/.project" />
		<copy file="java/easymode/test.classpath" tofile="dist-image/java/source/test/.classpath" />
	</target>
	
    <target name="test-ruby">
        <ant dir="ruby" target="all"/>
    </target>

	<target name="clean-ruby">
        <ant dir="ruby" target="clean"/>
    </target>

</project>
