<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xslt [
  <!--Used to control code intenting -->
  <!ENTITY nl "&#xa;">
  <!ENTITY tab "    ">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<!--
/*
 * Copyright 2006 ThoughtWorks, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
-->
<xsl:output method="text"/>
<xsl:strip-space elements="*"/>
<xsl:param name="mode" />

<xsl:template match="/">
	
	<xsl:apply-templates select="//top" />
	<!--<xsl:text>&nl;&nl;=over&nl;&nl;</xsl:text>-->
	<xsl:apply-templates select="//function" />
	<xsl:text disable-output-escaping="yes"><![CDATA[
=pod

=back

=cut

1;

__END__

=head1 SEE ALSO

For more information about Selenium Remote Control, visit the website
at L<http://www.openqa.org/selenium-rc/>.

=head1 BUGS

The Selenium Remote Control JIRA issue tracking system is available
online at L<http://jira.openqa.org/browse/SRC>.

=head1 AUTHOR

Maintained by Dan Fabulich <dfabulich@warpmail.net>

=head1 LICENSE

Copyright (c) 2006 ThoughtWorks, Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

]]></xsl:text>
</xsl:template>

<!--********************
TOP 
***************-->

<xsl:template match="top">
	<xsl:text disable-output-escaping="yes"><![CDATA[
# Copyright 2006 ThoughtWorks, Inc
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#


package WWW::Selenium;
use LWP::UserAgent;
use HTTP::Request;
use URI::Escape;

use strict;
use warnings;

=head1 NAME

WWW::Selenium - Perl Client for the Selenium Remote Control test tool

=head1 SYNOPSIS

    use WWW::Selenium;
    
    my $sel = WWW::Selenium->new("localhost", 4444, "*iexplore", "http://www.google.com");
    
    $sel->start();
    $sel->open("http://www.google.com");
    $sel->type("q", "hello world");
    $sel->click("btnG");
    $sel->wait_for_page_to_load(5000);
    print $sel->get_title();
    $sel->stop();

=head1 DESCRIPTION

Selenium Remote Control (SRC) is a test tool that allows you to write
automated web application UI tests in any programming language against
any HTTP website using any mainstream JavaScript-enabled browser.  SRC
provides a Selenium Server, which can automatically start/stop/control
any supported browser. It works by using Selenium Core, a pure-HTML+JS
library that performs automated tasks in JavaScript; the Selenium
Server communicates directly with the browser using AJAX
(XmlHttpRequest).

L<http://www.openqa.org/selenium-rc/>

This module sends commands directly to the Server using simple HTTP
GET/POST requests.  Using this module together with the Selenium
Server, you can automatically control any supported browser.

To use this module, you need to have already downloaded and started
the Selenium Server.  (The Selenium Server is a Java application.)

=cut

#]]></xsl:text><!-- Append this # so we can comment out the first line of the top description -->
    <xsl:apply-templates>
        <xsl:with-param name="replace-string"><xsl:text>&nl;</xsl:text></xsl:with-param>
    </xsl:apply-templates>
    <xsl:text disable-output-escaping="yes"><![CDATA[

=cut

### This part is hard-coded in the XSL
sub new {
    my ($class, $host, $port, $browser_start_command, $browser_url) = @_;
    my $self = { };
    bless $self, $class;

    $self->{host} = $host;
    $self->{port} = $port;
    $self->{browser_start_command} = $browser_start_command;
    $self->{browser_url} = $browser_url;
    $self->{session_id} = undef;
    return $self;
}

sub start {
    my $self = shift;
    $self->{session_id} = $self->get_string("getNewBrowserSession", $self->{browser_start_command}, $self->{browser_url});
}

sub stop {
    my $self = shift;
    $self->do_command("testComplete");
    $self->{session_id} = undef;
}

sub do_command {
    my $self = shift;
    my $command = shift;
    $command = uri_escape($command);
    my @args = @_;
    my $fullurl = "http://" . $self->{host}.":".$self->{port}."/selenium-server/driver/\?cmd=$command";
    for (my $i = 0; $i < @args; $i++) {
        $fullurl .= "&" . ($i+1) . "=" . uri_escape($args[$i]);
    }
    if (defined($self->{session_id})) {
        $fullurl .= '&sessionId=' . $self->{session_id};
    }
    #print "---> Requesting $fullurl\n";
    my $result;
    # We use the full version of LWP to make sure we issue an HTTP 1.1 request (SRC-25)
    my $ua = LWP::UserAgent->new;

    my $req = HTTP::Request->new(GET => $fullurl);

    # send request
    my $res = $ua->request($req);

    # check the outcome
    if ($res->is_success) {
        $result = $res->content;
        #print "Got result: $result\n";
    }
    else {
        die "Error: " . $res->status_line . "\n";
    }
    die $result if ($result !~ /^OK/);
    return $result;
}

sub get_string {
    my $self = shift;
    my $result = $self->do_command(@_);
    return substr($result, 3);
}

sub get_string_array {
    my $self = shift;
    my $result = $self->get_string(@_);
    my $token = "";
    my @tokens = ();
    my @chars = split(//, $result);
    for (my $i = 0; $i < @chars; $i++) {
        my $char = $chars[$i];
        if ($char eq '\\') {
            $i++;
            $char = $chars[$i];
            $token .= $char;
        } elsif ($char eq ',') {
            push (@tokens, $token);
            $token = "";
        } else {
            $token .= $char;
        }
    }
    push (@tokens, $token);
    return @tokens;
}

sub get_number {
    my $self = shift;
    my $result = $self->get_string(@_);
    # Is there something else I need to do here?
    return $result;
}

sub get_number_array {
    my $self = shift;
    my @result = $self->get_string_array(@_);
    # Is there something else I need to do here?
    return @result;
}

sub get_boolean {
    my $self = shift;
    my $result = $self->get_string(@_);
    if ($result eq "true") {
        return 1;
    }
    if ($result eq "false") {
        return 0;
    }
    die "result is neither 'true' nor 'false': $result";
}

sub get_boolean_array {
    my $self = shift;
    my @result = $self->get_string_array(@_);
    my @boolarr = ();
    for (my $i = 0; $i < @result; $i++) {
        if ($result[$i] eq "true") {
            push (@boolarr, 1);
            next;
        }
        if ($result[$i] eq "false") {
            push (@boolarr, 1);
            next;
        }
        die "result is neither 'true' nor 'false': ". $result[$i];
    }
    return @boolarr;
}

=head2 METHODS

The following methods are available:

=over

=item $sel = WWW::Selenium-E<gt>new($host, $port, $browser_string, $browser_url)

Constructs a new C<WWW::Selenium> object, specifying a Selenium Server
host/port, a command to launch the browser, and a starting URL for the
browser.

$browser_string may be any one of the following:

=over

=item * C<*firefox [absolute path]>

Automatically launch a new Firefox process using a custom Firefox
profile.
This profile will be automatically configured to use the Selenium
Server as a proxy and to have all annoying prompts
("save your password?" "forms are insecure" "make Firefox your default
browser?" disabled.  You may optionally specify
an absolute path to your firefox executable, or just say "*firefox". 
If no absolute path is specified, we'll look for
firefox.exe in a default location (normally c:\program files\mozilla
firefox\firefox.exe), which you can override by
setting the Java system property C<firefoxDefaultPath> to the correct
path to Firefox.

=item * C<*iexplore [absolute path]>

Automatically launch a new Internet Explorer process using custom
Windows registry settings.
This process will be automatically configured to use the Selenium
Server as a proxy and to have all annoying prompts
("save your password?" "forms are insecure" "make Firefox your default
browser?" disabled.  You may optionally specify
an absolute path to your iexplore executable, or just say "*iexplore". 
If no absolute path is specified, we'll look for
iexplore.exe in a default location (normally c:\program files\internet
explorer\iexplore.exe), which you can override by
setting the Java system property C<iexploreDefaultPath> to the correct
path to Internet Explorer.

=item * C</path/to/my/browser [other arguments]>

You may also simply specify the absolute path to your browser
executable, or use a relative path to your executable (which we'll try
to find on your path).  <b>Warning:</b> If you
specify your own custom browser, it's up to you to configure it
correctly.  At a minimum, you'll need to configure your
browser to use the Selenium Server as a proxy, and disable all
browser-specific prompting.

=back

$host is the host name on which the Selenium Server resides
$port is the port on which the Selenium Server is listening
$browser_string is the command string used to launch the browser, e.g.
"*firefox", "*iexplore" or "c:\\program files\\internet
explorer\\iexplore.exe"
$browser_url is the starting URL including just a domain name.  We'll
start the browser pointing at the Selenium resources on this URL,
e.g. "http://www.google.com" would send the browser to
"http://www.google.com/selenium-server/SeleneseRunner.html"


=cut

### From here on, everything's auto-generated from XML
]]>
</xsl:text>
</xsl:template>

<xsl:template match="comment">
	<xsl:apply-templates>
		<xsl:with-param name="replace-string"><xsl:text>&nl;</xsl:text></xsl:with-param>
	</xsl:apply-templates>
</xsl:template>

<xsl:template match="node()|@*" >
	<xsl:param name="replace-string" />
	<xsl:copy>
		<xsl:apply-templates select="node()|@*">
			<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
		</xsl:apply-templates>
	</xsl:copy>
</xsl:template>

<xsl:template match="text()">
	<xsl:param name="replace-string" />
	<xsl:call-template name="search-and-replace">
		<xsl:with-param name="input"><xsl:value-of select='.' /></xsl:with-param>
		<xsl:with-param name="search-string"><xsl:text>&nl;</xsl:text></xsl:with-param>
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:call-template>
</xsl:template>

<xsl:template match="b|strong">
	<xsl:param name="replace-string" />
	<xsl:text>B&lt;</xsl:text>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:text>&gt;</xsl:text>
</xsl:template>

<xsl:template match="code|tt">
	<xsl:param name="replace-string" />
	<xsl:text>C&lt;</xsl:text>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:text>&gt;</xsl:text>
</xsl:template>

<xsl:template match="em|i">
	<xsl:param name="replace-string" />
	<xsl:text>I&lt;</xsl:text>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:text>&gt;</xsl:text>
</xsl:template>

<xsl:template match="h3">
	<xsl:param name="replace-string" />
	<xsl:text>&nl;=head3 </xsl:text>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:text>&nl;&nl;</xsl:text>
</xsl:template>

<xsl:template match="li">
	<xsl:param name="replace-string" />
	<xsl:choose>
		<xsl:when test="local-name(..) = 'ul'">
			<xsl:text>&nl;=item * </xsl:text>
		</xsl:when>
		<xsl:when test="local-name(..) = 'ol'">
			<xsl:text>&nl;=item </xsl:text><xsl:value-of select="position()"/><xsl:text>. </xsl:text>
		</xsl:when>
	</xsl:choose>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:value-of select="$replace-string" />
</xsl:template>

<xsl:template match="ul|ol|dl">
	<xsl:param name="replace-string" />
	<xsl:text>&nl;&nl;=over&nl;&nl;</xsl:text>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /><!--<xsl:text>&tab;</xsl:text>--></xsl:with-param>
	</xsl:apply-templates>
	<xsl:text>&nl;&nl;=back&nl;</xsl:text>
</xsl:template>

<xsl:template match="p">
	<xsl:param name="replace-string" />
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:text>&nl;</xsl:text>
</xsl:template>

<xsl:template match="a|blockquote">
	<xsl:param name="replace-string" />
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
</xsl:template>

<xsl:template match="dt">
	<xsl:param name="replace-string" />
	<xsl:text>&nl;=item </xsl:text>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:text>&nl;</xsl:text>
</xsl:template>

<xsl:template match="dd">
	<xsl:param name="replace-string" />
	<xsl:value-of select="$replace-string" />
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:value-of select="$replace-string" />
</xsl:template>

<!--****************
FUNCTION
******************-->

<xsl:template match="function">
	<!-- POD PerlDoc -->
	<xsl:text>&nl;&nl;=item $sel-E&lt;gt&gt;</xsl:text>
	<xsl:call-template name="underscorify">
		<xsl:with-param name="input"><xsl:value-of select="@name" /></xsl:with-param>
	</xsl:call-template>
	<xsl:text>(</xsl:text>
	<xsl:apply-templates select="param" mode="declaration" />
	<xsl:text>)&nl;&nl;</xsl:text>
	<xsl:apply-templates select="comment" />
	<xsl:text>&nl;</xsl:text>
	<xsl:apply-templates select="param" mode="comment" />

	<xsl:text>&nl;&nl;=cut&nl;</xsl:text>

	<!-- Declaration -->
	<xsl:text>&nl;sub </xsl:text>
	<xsl:call-template name="underscorify">
		<xsl:with-param name="input"><xsl:value-of select="@name" /></xsl:with-param>
	</xsl:call-template>
	
	<xsl:text> {&nl;&tab;my $self = shift;&nl;&tab;</xsl:text>
	
	<xsl:if test="count(./return) = 0">
		<xsl:text>$self->do_command</xsl:text>
	</xsl:if>
	<xsl:apply-templates select="return" mode="implementation" />
	<xsl:text>("</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>", @_);&nl;}&nl;</xsl:text>
</xsl:template>


<!--*****************
RETURN
*******************-->

<xsl:template name="procMethod">
	<xsl:param name="type" />
	<xsl:choose>
		<xsl:when test="$type='string'">
			<xsl:text>$self->get_string</xsl:text>
		</xsl:when>
		<xsl:when test="$type='number'">
			<xsl:text>$self->get_number</xsl:text>
		</xsl:when>
		<xsl:when test="$type='boolean'">
			<xsl:text>$self->get_boolean</xsl:text>
		</xsl:when>
		<xsl:when test="$type='string[]'">
			<xsl:text>$self->get_string_array</xsl:text>
		</xsl:when>
		<xsl:when test="$type='number[]'">
			<xsl:text>$self->get_number_array</xsl:text>
		</xsl:when>
		<xsl:when test="$type='boolean[]'">
			<xsl:text>$self->get_boolean_array</xsl:text>
		</xsl:when>
		<xsl:otherwise>
			<xsl:message terminate="yes">returntype is invalid: <xsl:value-of select="$type"/></xsl:message>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<!-- In the function implementation, add "return" keyword, casting to correct type -->
<xsl:template match="return" mode="implementation">
	<xsl:text>return </xsl:text>
	<xsl:call-template name="procMethod">
		<xsl:with-param name="type"><xsl:value-of select="@type" /></xsl:with-param>
	</xsl:call-template>
</xsl:template>

<!-- In the POD PerlDoc, add the param description -->
<xsl:template match="param" mode="comment">
	<xsl:text>&nl;$</xsl:text>
	<xsl:call-template name="underscorify">
		<xsl:with-param name="input"><xsl:value-of select="@name" /></xsl:with-param>
	</xsl:call-template>
	<xsl:text> is </xsl:text>
	<xsl:apply-templates>
		<xsl:with-param name="replace-string"><xsl:text>&nl;</xsl:text></xsl:with-param>		
	</xsl:apply-templates>
	<xsl:text>.  </xsl:text>
</xsl:template>

<!-- In the function "declaration" in the POD, specify all parameters by name-->
<xsl:template match="param" mode="declaration">
	<xsl:text>$</xsl:text>
	<xsl:call-template name="underscorify">
		<xsl:with-param name="input"><xsl:value-of select="@name" /></xsl:with-param>
	</xsl:call-template>
	<xsl:if test="position() != last()">
		<xsl:text>, </xsl:text>
	</xsl:if>
</xsl:template>

<!-- In the function implementation, add String parameters to array -->
<xsl:template match="param" mode="implementation">
	<xsl:value-of select="@name" />
	<xsl:text>,</xsl:text>
</xsl:template>

<xsl:template name="search-and-replace">
     <xsl:param name="input"/>
     <xsl:param name="search-string"/>
     <xsl:param name="replace-string"/>
     <xsl:choose>
          <!-- See if the input contains the search string -->
          <xsl:when test="$search-string and 
                           contains($input,$search-string)">
          <!-- If so, then concatenate the substring before the search
          string to the replacement string and to the result of
          recursively applying this template to the remaining substring.
          -->
               <xsl:value-of 
                    select="substring-before($input,$search-string)"/>
               <xsl:value-of select="$replace-string"/>
               <xsl:call-template name="search-and-replace">
                    <xsl:with-param name="input"
                    select="substring-after($input,$search-string)"/>
                    <xsl:with-param name="search-string" 
                    select="$search-string"/>
                    <xsl:with-param name="replace-string" 
                        select="$replace-string"/>
               </xsl:call-template>
          </xsl:when>
          <xsl:otherwise>
               <!-- There are no more occurrences of the search string so 
               just return the current input string -->
               <xsl:value-of select="$input"/>
          </xsl:otherwise>
     </xsl:choose>
</xsl:template>

<xsl:template name="underscorify">
	<xsl:param name="input" />
	<xsl:variable name="output"><xsl:value-of select="$input" /></xsl:variable>
	<!-- for-each can't handle arbitrary sequences!  
		variables can't be changed once defined!
		Welcome to copy-and-paste land! -->
	<xsl:variable name="outputa">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$output' /></xsl:with-param>
			<xsl:with-param name="search-string">A</xsl:with-param>
			<xsl:with-param name="replace-string">_a</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputb">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputa' /></xsl:with-param>
			<xsl:with-param name="search-string">B</xsl:with-param>
			<xsl:with-param name="replace-string">_b</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputc">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputb' /></xsl:with-param>
			<xsl:with-param name="search-string">C</xsl:with-param>
			<xsl:with-param name="replace-string">_c</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputd">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputc' /></xsl:with-param>
			<xsl:with-param name="search-string">D</xsl:with-param>
			<xsl:with-param name="replace-string">_d</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outpute">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputd' /></xsl:with-param>
			<xsl:with-param name="search-string">E</xsl:with-param>
			<xsl:with-param name="replace-string">_e</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputf">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outpute' /></xsl:with-param>
			<xsl:with-param name="search-string">F</xsl:with-param>
			<xsl:with-param name="replace-string">_f</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputg">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputf' /></xsl:with-param>
			<xsl:with-param name="search-string">G</xsl:with-param>
			<xsl:with-param name="replace-string">_g</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputh">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputg' /></xsl:with-param>
			<xsl:with-param name="search-string">H</xsl:with-param>
			<xsl:with-param name="replace-string">_h</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputi">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputh' /></xsl:with-param>
			<xsl:with-param name="search-string">I</xsl:with-param>
			<xsl:with-param name="replace-string">_i</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputj">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputi' /></xsl:with-param>
			<xsl:with-param name="search-string">J</xsl:with-param>
			<xsl:with-param name="replace-string">_j</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputk">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputj' /></xsl:with-param>
			<xsl:with-param name="search-string">K</xsl:with-param>
			<xsl:with-param name="replace-string">_k</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputl">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputk' /></xsl:with-param>
			<xsl:with-param name="search-string">L</xsl:with-param>
			<xsl:with-param name="replace-string">_l</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputm">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputl' /></xsl:with-param>
			<xsl:with-param name="search-string">M</xsl:with-param>
			<xsl:with-param name="replace-string">_m</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputn">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputm' /></xsl:with-param>
			<xsl:with-param name="search-string">N</xsl:with-param>
			<xsl:with-param name="replace-string">_n</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputo">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputn' /></xsl:with-param>
			<xsl:with-param name="search-string">O</xsl:with-param>
			<xsl:with-param name="replace-string">_o</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputp">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputo' /></xsl:with-param>
			<xsl:with-param name="search-string">P</xsl:with-param>
			<xsl:with-param name="replace-string">_p</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputq">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputp' /></xsl:with-param>
			<xsl:with-param name="search-string">Q</xsl:with-param>
			<xsl:with-param name="replace-string">_q</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputr">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputq' /></xsl:with-param>
			<xsl:with-param name="search-string">R</xsl:with-param>
			<xsl:with-param name="replace-string">_r</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputs">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputr' /></xsl:with-param>
			<xsl:with-param name="search-string">S</xsl:with-param>
			<xsl:with-param name="replace-string">_s</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputt">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputs' /></xsl:with-param>
			<xsl:with-param name="search-string">T</xsl:with-param>
			<xsl:with-param name="replace-string">_t</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputu">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputt' /></xsl:with-param>
			<xsl:with-param name="search-string">U</xsl:with-param>
			<xsl:with-param name="replace-string">_u</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputv">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputu' /></xsl:with-param>
			<xsl:with-param name="search-string">V</xsl:with-param>
			<xsl:with-param name="replace-string">_v</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputw">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputv' /></xsl:with-param>
			<xsl:with-param name="search-string">W</xsl:with-param>
			<xsl:with-param name="replace-string">_w</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputx">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputw' /></xsl:with-param>
			<xsl:with-param name="search-string">X</xsl:with-param>
			<xsl:with-param name="replace-string">_x</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputy">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputx' /></xsl:with-param>
			<xsl:with-param name="search-string">Y</xsl:with-param>
			<xsl:with-param name="replace-string">_y</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputz">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputy' /></xsl:with-param>
			<xsl:with-param name="search-string">Z</xsl:with-param>
			<xsl:with-param name="replace-string">_z</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:value-of select="$outputz" />
</xsl:template>


</xsl:stylesheet>

