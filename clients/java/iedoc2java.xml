<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xslt [
  <!--Used to control code intenting -->
  <!ENTITY nl "&#xa;">
  <!ENTITY tab "&#x9;">
]>
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<!--
/*
 * Copyright 2006 ThoughtWorks, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
-->
   
<xsl:output method="html"/>
<xsl:strip-space elements="*"/>
<xsl:param name="mode" />

<xsl:template match="/">
	<xsl:text>/*
 * Copyright 2006 ThoughtWorks, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

// This file has been automatically generated via XSL&nl;</xsl:text>
	<xsl:choose>
		<xsl:when test="$mode='implementation'">
			<xsl:apply-templates select="//top" mode="implementation"/>
			<xsl:apply-templates select="//function" mode="implementation"/>
		</xsl:when>
		<xsl:when test="$mode='interface'">
			<xsl:apply-templates select="//top" mode="interface"/>
			<xsl:apply-templates select="//function" mode="interface"/>
		</xsl:when>
	</xsl:choose>
	<xsl:text>}</xsl:text>
</xsl:template>

<!--********************
TOP 
***************-->

<xsl:template match="top" mode="interface">
	<xsl:text>package com.thoughtworks.selenium;&nl;</xsl:text>
	<xsl:text>/**&nl;</xsl:text>
	<xsl:apply-templates />
	<xsl:text>*/&nl;public interface Selenium {

	/** Launches the browser with a new Selenium session */
    void start();

    /** Ends the test session, killing the browser */
    void stop();
</xsl:text>
</xsl:template>

<xsl:template match="top" mode="implementation">
	<xsl:text>package com.thoughtworks.selenium;&nl;</xsl:text>
	<xsl:text disable-output-escaping="yes"><![CDATA[
/** The default implementation of the Selenium interface; <i>end users will primarily interact with this object.</i> */
public class DefaultSelenium implements Selenium {

	// This file has been automatically generated using XSL
	// This part of the file is hard-coded in the XSL
	protected CommandProcessor commandProcessor;
	/** Uses a CommandBridgeClient, specifying a server host/port, a command to launch the browser, and a starting URL for the browser.
     * 
     * <p><i>browserString</i> may be any one of the following:
     * <ul>
     * <li><code>*firefox [absolute path]</code> - Automatically launch a new Firefox process using a custom Firefox profile.
     * This profile will be automatically configured to use the Selenium Server as a proxy and to have all annoying prompts
     * ("save your password?" "forms are insecure" "make Firefox your default browser?" disabled.  You may optionally specify
     * an absolute path to your firefox executable, or just say "*firefox".  If no absolute path is specified, we'll look for
     * firefox.exe in a default location (normally c:\program files\mozilla firefox\firefox.exe), which you can override by
     * setting the Java system property <code>firefoxDefaultPath</code> to the correct path to Firefox.</li>
     * <li><code>*iexplore [absolute path]</code> - Automatically launch a new Internet Explorer process using custom Windows registry settings.
     * This process will be automatically configured to use the Selenium Server as a proxy and to have all annoying prompts
     * ("save your password?" "forms are insecure" "make Firefox your default browser?" disabled.  You may optionally specify
     * an absolute path to your iexplore executable, or just say "*iexplore".  If no absolute path is specified, we'll look for
     * iexplore.exe in a default location (normally c:\program files\internet explorer\iexplore.exe), which you can override by
     * setting the Java system property <code>iexploreDefaultPath</code> to the correct path to Internet Explorer.</li>
     * <li><code>/path/to/my/browser [other arguments]</code> - You may also simply specify the absolute path to your browser
     * executable, or use a relative path to your executable (which we'll try to find on your path).  <b>Warning:</b> If you
     * specify your own custom browser, it's up to you to configure it correctly.  At a minimum, you'll need to configure your
     * browser to use the Selenium Server as a proxy, and disable all browser-specific prompting.
     * </ul>
     * 
     * @param serverHost the host name on which the Selenium Server resides
     * @param serverPort the port on which the Selenium Server is listening
     * @param browserString the command string used to launch the browser, e.g. "*firefox", "*iexplore" or "c:\\program files\\internet explorer\\iexplore.exe"
     * @param browserURL the starting URL including just a domain name.  We'll start the browser pointing at the Selenium resources on this URL,
     * e.g. "http://www.google.com" would send the browser to "http://www.google.com/selenium-server/SeleneseRunner.html"
     */
    public DefaultSelenium(String serverHost, int serverPort, String browserStartCommand, String browserURL) {
        this.commandProcessor = new HttpCommandProcessor(serverHost, serverPort, browserStartCommand, browserURL);
    }
    
    /** Uses an arbitrary CommandProcessor */
    public DefaultSelenium(CommandProcessor processor) {
        this.commandProcessor = processor;
    }
    
    public void start() {
		try {
            commandProcessor.start();
        }
        catch (Exception e) {
            if (e.getMessage().indexOf("Connection refused: connect") != -1) {
                throw new RuntimeException("Could not contact Selenium Server; have you started it?\n" + e.getMessage());
            }
        }
    }

    public void stop() {
        commandProcessor.stop();
    }

	// From here on, everything in this file has been auto-generated
]]>
</xsl:text>
</xsl:template>

<!--****************
FUNCTION
******************-->

<xsl:template match="function" mode="interface">
	<!-- JavaDoc -->
	<xsl:text>/** </xsl:text>
	<xsl:apply-templates select="comment" />
	<xsl:apply-templates select="param" mode="comment" />
	<xsl:apply-templates select="return" mode="comment" />
	<xsl:text>*/&nl;</xsl:text>
	<!-- Return type or void -->
	<xsl:if test="count(./return) = 0">
		<xsl:text>void </xsl:text>
	</xsl:if>
	<xsl:apply-templates select="return" mode="declaration" />
	
	<xsl:value-of select="@name" />
	
	<!-- Params -->
	<xsl:text>(</xsl:text>
	<xsl:apply-templates select="param" mode="declaration" />
	<xsl:text>);&nl;&nl;</xsl:text>
</xsl:template>

<xsl:template match="function" mode="implementation">
	<xsl:text>&tab;public </xsl:text>
	<!-- Return type or void -->
	<xsl:if test="count(./return) = 0">
		<xsl:text>void </xsl:text>
	</xsl:if>
	<xsl:apply-templates select="return" mode="declaration" />
	
	<xsl:value-of select="@name" />
	
	<!-- Params -->
	<xsl:text>(</xsl:text>
	<xsl:apply-templates select="param" mode="declaration" />
	<xsl:text>) {&nl;&tab;&tab;</xsl:text>
	
	<!-- Return only if necessary -->
	<xsl:if test="count(./return) = 0">
		<xsl:text>commandProcessor.doCommand</xsl:text>
	</xsl:if>
	<xsl:apply-templates select="return" mode="implementation" />
	<xsl:text>("</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text>", new String[] {</xsl:text>
	<xsl:apply-templates select="param" mode="implementation" />
	<xsl:text>});&nl;&tab;}&nl;&nl;</xsl:text>
</xsl:template>

<!--*****************
RETURN
*******************-->

<!-- Generate the return type -->
<xsl:template name="returntype">
	<xsl:param name="type" />
	<xsl:choose>
		<xsl:when test="$type='string'">
			<xsl:text>String</xsl:text>
		</xsl:when>
		<xsl:when test="$type='number'">
			<xsl:text>Number</xsl:text>
		</xsl:when>
		<xsl:when test="$type='boolean'">
			<xsl:text>boolean</xsl:text>
		</xsl:when>
		<xsl:when test="$type='string[]'">
			<xsl:text>String[]</xsl:text>
		</xsl:when>
		<xsl:when test="$type='number[]'">
			<xsl:text>Number[]</xsl:text>
		</xsl:when>
		<xsl:when test="$type='boolean[]'">
			<xsl:text>boolean[]</xsl:text>
		</xsl:when>
		<xsl:otherwise>
			<xsl:message terminate="yes">returntype is invalid: <xsl:value-of select="$type"/></xsl:message>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="procMethod">
	<xsl:param name="type" />
	<xsl:choose>
		<xsl:when test="$type='string'">
			<xsl:text>commandProcessor.getString</xsl:text>
		</xsl:when>
		<xsl:when test="$type='number'">
			<xsl:text>commandProcessor.getNumber</xsl:text>
		</xsl:when>
		<xsl:when test="$type='boolean'">
			<xsl:text>commandProcessor.getBoolean</xsl:text>
		</xsl:when>
		<xsl:when test="$type='string[]'">
			<xsl:text>commandProcessor.getStringArray</xsl:text>
		</xsl:when>
		<xsl:when test="$type='number[]'">
			<xsl:text>commandProcessor.getNumberArray</xsl:text>
		</xsl:when>
		<xsl:when test="$type='boolean[]'">
			<xsl:text>commandProcessor.getBooleanArray</xsl:text>
		</xsl:when>
		<xsl:otherwise>
			<xsl:message terminate="yes">returntype is invalid: <xsl:value-of select="$type"/></xsl:message>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<!-- In the function implementation, add "return" keyword, casting to correct type -->
<xsl:template match="return" mode="implementation">
	<xsl:text>return </xsl:text>
	<xsl:call-template name="procMethod">
		<xsl:with-param name="type"><xsl:value-of select="@type" /></xsl:with-param>
	</xsl:call-template>
</xsl:template>

<!-- In the JavaDoc, add the @return tag -->
<xsl:template match="return" mode="comment">
	<xsl:text>@return </xsl:text>
	<xsl:apply-templates />
	<xsl:text>&nl;</xsl:text>
</xsl:template>

<!-- In the function declaration, specify the return type -->
<xsl:template match="return" mode="declaration">
	<xsl:call-template name="returntype">
		<xsl:with-param name="type"><xsl:value-of select="@type" /></xsl:with-param>
	</xsl:call-template>
	<xsl:text> </xsl:text>
</xsl:template>

<!-- In the JavaDoc, add the @param tag -->
<xsl:template match="param" mode="comment">
	<xsl:text>@param </xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text> </xsl:text>
	<xsl:apply-templates/>
	<xsl:text>&nl;</xsl:text>
</xsl:template>

<!-- In the function declaration, specify all String parameters -->
<xsl:template match="param" mode="declaration">
	<xsl:text>String </xsl:text>
	<xsl:value-of select="@name" />
	<xsl:if test="position() != last()">
		<xsl:text>,</xsl:text>
	</xsl:if>
</xsl:template>

<!-- In the function implementation, add String parameters to array -->
<xsl:template match="param" mode="implementation">
	<xsl:value-of select="@name" />
	<xsl:text>,</xsl:text>
</xsl:template>

<!--*****************
COMMENT
*******************-->

<xsl:template match="comment">
	<xsl:apply-templates />
	<xsl:text>&nl;</xsl:text>
</xsl:template>

<xsl:template match="node()|@*" >
	<xsl:output method="html"/>
	<xsl:copy>
		<xsl:apply-templates select="node()|@*"/>
	</xsl:copy>
</xsl:template>

</xsl:stylesheet>

