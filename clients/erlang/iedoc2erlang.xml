<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xslt [
  <!--Used to control code intenting -->
  <!ENTITY nl "&#xa;">
  <!ENTITY tab "    ">
  <!ENTITY foot "&gt;">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
   
<xsl:output method="html"/>
<xsl:strip-space elements="*"/>
<xsl:param name="mode" />

<xsl:template match="/">
	
	<xsl:apply-templates select="//top" />
	<xsl:apply-templates select="//function" />
	<xsl:text disable-output-escaping="yes">
%%%%%%%%%%%%%%%%%%%%
%% PRIVATE FUNCTIONS
%%%%%%%%%%%%%%%%%%%%

%% @spec ordinal_args([Value]) -> [{integer(), Value}]
%% @doc Turns each list item into a tuple of {Index, Item}
%%      Start index is 1
ordinal_args(Args) -> 
  {Results, _} = lists:foldl( fun (Item, {Acc, X}) ->
                                        {[{X,Item} | Acc], X+1}
                              end, {[],1}, Args),
  lists:reverse(Results).

%% @spec get_command([{Key,Value}]) -> string()
%% @doc composes a complete Selenium request string from a set of query parameters
get_command(Args) ->
  ?COMMAND_PATH ++ "?" ++ mochiweb_util:urlencode(Args).

%% @spec selenium_call(Session, string(), string()) -> RawSeleniumBody | SeleniumError
selenium_call(Session, Verb, Args) ->
  ArgsWithSession = [{"sessionId", Session#session.id} | ordinal_args(Args)],
  Command = get_command([{"cmd", Verb} | ArgsWithSession]),
  selenium_call(Session, Command).

%% @spec selenium_call(Session, string()) -> RawSeleniumBody | SeleniumError
%%       Session = { Server, Port, SessionId }
%%       RawSeleniumBody = string()
%%       SeleniumError = {selenium_error, RawSeleniumBody}
selenium_call(S, Command) ->
  Url = lists:concat(["http://", S#session.server, ":", S#session.port, Command]),
  {ok, {_, _, Body}} = http:request(Url),
  % this is what HTTP response codes are for. but looks like we're
  % reproducing the functionality for some reason...
  {Code,_Response} = lists:split(2, Body),
  case Code of
    "OK"   -> {ok, Body};
    _Else  -> {selenium_error, Body}
  end.

%% @spec strip_prefix(string()) -> string()
%% @doc strips the "OK," from the front of a response.
strip_prefix(Body) ->
  {_Code,Response} = lists:split(3, Body),
  Response.

%% @spec parse_string_array(string()) -> [string()]
%% @doc simple CSV parse of a Selenium response body
parse_string_array(Body) ->
  String = strip_prefix(Body),
  parse_array(String,[],[]).
parse_array([H|T], Current, Results) ->
  case H of
    $,  -> NewString = lists:reverse(Current),
           parse_array(T, [], [NewString|Results]);
    $\\ -> [H2|T2] = T,
           parse_array(T2, [H2|Current], Results);
    _   -> parse_array(T, [H|Current], Results)
  end;
parse_array([],Current,Result) ->
  lists:reverse([lists:reverse(Current)|Result]).

parse_boolean(Body) ->
  list_to_atom( strip_prefix( Body ) ).
parse_boolean_array(Body) ->
  lists:map( lists_to_atom, parse_string_array( Body ) ).
parse_num(Body) ->
  list_to_integer( strip_prefix( Body ) ).
parse_num_array(Body) ->
  lists:map( list_to_integer, parse_string_array(Body) ).

%%%%%%%%%%%%%%%%%%%%%
%% GEN_SERVER SUPPORT
%%%%%%%%%%%%%%%%%%%%%
init({Server, Port, StartCmd, Url}) -> 
  inets:start(),
  Command = get_command([{"cmd", ?NEW_SESSION} | ordinal_args([StartCmd, Url])]),
  {ok, Response} = selenium_call( #session{server = Server, port = Port}, Command ),
  SessionId = strip_prefix(Response),
  {ok, #session{server=Server, port=Port, id=SessionId}}.

handle_call(#cmd{} = Cmd, _, Session) ->
  case selenium_call(Session, Cmd#cmd.string, Cmd#cmd.params) of
    {ok, Response} -> parse_cmd_response(Cmd#cmd.type, Response, Session);
    {selenium_error, Response} -> {reply, {selenium_error, Response}, Session}
  end;
handle_call(stop, _, Session) ->
  selenium_call(Session, "testComplete", []),
  {stop, normal, ok, Session}.

% @spec parse_cmd_response(Type, Response, Session) -> Reply
%       Type = exec | string | string_array | boolean | boolean_array
%              | num | num_array
%       Response = string()
%       Reply = {reply, ReturnVal, Session}
%       Response = term()
% @doc Parses a Selenium response according to its specified return
%      type.
parse_cmd_response(Type, Response, Session) ->
  case Type of
    exec          -> {reply, ok, Session};
    string        -> {reply, strip_prefix(Response), Session};
    string_array  -> {reply, parse_string_array(Response), Session};
    boolean       -> {reply, parse_boolean(Response), Session};
    boolean_array -> {reply, parse_boolean_array(Response), Session};
    num           -> {reply, parse_num(Response), Session};
    num_array     -> {reply, parse_num_array(Response), Session}
  end.

handle_cast(_Request, State) -> {noreply, State}.
terminate(_Reason, _Session) -> ok.
code_change(_OldVsn, Session, _Extra) -> {ok, Session}.
handle_info(_Info, Session) -> {noreply, Session}.

%%%%%%%%%%%%%%%
%% TESTS
%%%%%%%%%%%%%%%
test() ->
  test_args(),
  test_command(),
  test_strip_prefix(),
  test_parse_string_array(),
  test_acceptance(),
  ok.

test_args() ->
  List = ordinal_args(["foo","bar","baz"]),
  [{1,"foo"}|Rest1] = List,
  [{2,"bar"}|Rest2] = Rest1,
  [{3,"baz"}|_] = Rest2.

test_command() ->
  Results = get_command([{"cmd","foo \r\n"},{"param","bar"}]),
  "/selenium-server/driver/?cmd=foo+%0D%0A&amp;param=bar" = Results,
  ok.

test_strip_prefix() ->
  "foo" = strip_prefix("OK,foo"),
  "_REQ" = strip_prefix("BAD_REQ"),
  ok.

test_parse_string_array() ->
  TestString = "OK,veni\\, vidi\\, vici,c:\\\\foo\\\\bar,c:\\\\I came\\, I \\\\saw\\\\\\, I conquered",
  Expected = ["veni, vidi, vici", "c:\\foo\\bar", "c:\\I came, I \\saw\\, I conquered"],
  Expected = parse_string_array(TestString),
  ok.

test_acceptance() ->
  Base = "http://localhost:4444/",
  {ok, Pid} = get_new_browser_session("localhost", 4444, "*firefox", Base),
  open(Pid, "/selenium-server/tests/html/test_click_page1.html"),
  "Click here for next page" = get_text(Pid, "link"),
  Links = get_all_links(Pid),
  6 = length(Links),
  "linkToAnchorOnThisPage" = lists:nth(4, Links),
  click(Pid, "link"),
  wait_for_page_to_load(Pid, 5000),
  "http://localhost:4444/selenium-server/tests/html/test_click_page2.html" = get_location(Pid), 
  click(Pid, "previousPage"),
  wait_for_page_to_load(Pid, 5000),
  "http://localhost:4444/selenium-server/tests/html/test_click_page1.html" = get_location(Pid),
  false = is_prompt_present(Pid),
  0 = get_xpath_count(Pid, "//sandwich"),
  stop(Pid),
  ok.
</xsl:text>
</xsl:template>

<!--********************
TOP 
***************-->

<xsl:template match="top">
	<xsl:text disable-output-escaping="yes">

%% @author Brian P O'Rourke &lt;brianorourke@gmail.com&gt; [http://brianorourke.org]
%% @doc SeleniumRC: an Erlang Module
%%
%% Example usage:
%%   Base = "http://localhost:4444/",
%%   {ok, Pid} = selenium:get_new_browser_session("localhost", 4444, "*firefox", Base),
%%   selenium:open(Pid, "/selenium-server/tests/html/test_click_page1.html"),
%%   Links = selenium:get_all_links(Pid),
%%   selenium:stop(Pid).
%%
%% See selenium:test_acceptance() for a more complex example.

-module(selenium).
-author("Brian P O'Rourke (brianorourke@gmail.com)").
-behaviour(gen_server).

% </xsl:text>
	<xsl:apply-templates>
		<xsl:with-param name="replace-string">&nl;%% </xsl:with-param>
	</xsl:apply-templates>
	<xsl:text disable-output-escaping="yes"><![CDATA[
-export([get_new_browser_session/4,
         stop/1,
         open/2,
         click/2,
         get_all_links/1,
         get_text/2,
         wait_for_page_to_load/2,
         get_location/1,
         is_prompt_present/1,
         get_xpath_count/2
         ]).

-export([init/1,terminate/2,handle_call/3,handle_cast/2,code_change/3,handle_info/2]).
-export([test/0]).
-define(COMMAND_PATH, "/selenium-server/driver/").
-define(NEW_SESSION, "getNewBrowserSession").
-define(SERVER, selenium).

-record(session,
  {server,
  port,
  id
  }).

-record(cmd,
  {type,
  string,
  params = []
  }).

%%%%%%%%%%%%%
%% PUBLIC API
%%%%%%%%%%%%%

%% @spec get_new_browser_session(string(), integer(), string(), string()) -> Result
%%       Result = {ok,Pid} | ignore | {error,Error},
%%       Pid = pid(),
%%       Error = {already_started,Pid} | term()
get_new_browser_session(Server, Port, StartCmd, Url) ->
  gen_server:start_link({local,?SERVER}, ?MODULE, {Server, Port, StartCmd, Url}, []).
    
%% @spec stop(pid()) -> ok
stop(Pid) ->
gen_server:call(Pid, stop).
     

]]>
</xsl:text>
</xsl:template>

<xsl:template match="comment">
	<xsl:text>&nl;%% </xsl:text>
	<xsl:apply-templates>
		<xsl:with-param name="replace-string">&nl;%% </xsl:with-param>
	</xsl:apply-templates>
</xsl:template>

<xsl:template match="node()|@*" >
	<xsl:param name="replace-string" />
	<xsl:copy>
		<xsl:apply-templates select="node()|@*">
			<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
		</xsl:apply-templates>
	</xsl:copy>
</xsl:template>

<xsl:template match="text()">
	<xsl:param name="replace-string" />
	<xsl:call-template name="search-and-replace">
		<xsl:with-param name="input"><xsl:value-of select='.' /></xsl:with-param>
		<xsl:with-param name="search-string"><xsl:text>&nl;</xsl:text></xsl:with-param>
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:call-template>
</xsl:template>

<xsl:template match="b|strong">
	<xsl:param name="replace-string" />
	<xsl:element name="b">
		<xsl:apply-templates select="node()|@*">
			<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
		</xsl:apply-templates>
	</xsl:element>
</xsl:template>

<xsl:template match="code|tt">
	<xsl:param name="replace-string" />
	<xsl:element name="tt">
		<xsl:apply-templates select="node()|@*">
			<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
		</xsl:apply-templates>
	</xsl:element>
</xsl:template>

<xsl:template match="em|i">
	<xsl:param name="replace-string" />
	<xsl:element name="em">
		<xsl:apply-templates select="node()|@*">
			<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
		</xsl:apply-templates>
	</xsl:element>
</xsl:template>

<xsl:template match="h3">
	<xsl:param name="replace-string" />
	<xsl:text>===</xsl:text>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
</xsl:template>

<xsl:template match="li">
	<xsl:param name="replace-string" />
	<xsl:choose>
		<xsl:when test="local-name(..) = 'ul'">
			<xsl:text>*&tab;</xsl:text>
		</xsl:when>
		<xsl:when test="local-name(..) = 'ol'">
			<xsl:value-of select="position()"/><xsl:text>. </xsl:text>
		</xsl:when>
	</xsl:choose>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:value-of select="$replace-string" />
</xsl:template>

<xsl:template match="ul|ol|dl">
	<xsl:param name="replace-string" />
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /><!--<xsl:text>&tab;</xsl:text>--></xsl:with-param>
	</xsl:apply-templates>
	<xsl:value-of select="$replace-string" />
</xsl:template>

<xsl:template match="p">
	<xsl:param name="replace-string" />
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:value-of select="$replace-string" />
</xsl:template>

<xsl:template match="a|blockquote">
	<xsl:param name="replace-string" />
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
</xsl:template>

<xsl:template match="dt">
	<xsl:param name="replace-string" />
	<xsl:text>*&tab;</xsl:text>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /></xsl:with-param>
	</xsl:apply-templates>
	<xsl:text>::</xsl:text>
</xsl:template>

<xsl:template match="dd">
	<xsl:param name="replace-string" />
	<xsl:value-of select="$replace-string" />
	<xsl:text>&tab;</xsl:text>
	<xsl:apply-templates select="node()|@*">
		<xsl:with-param name="replace-string"><xsl:value-of select="$replace-string" /><xsl:text>&tab;</xsl:text></xsl:with-param>
	</xsl:apply-templates>
	<xsl:value-of select="$replace-string" />
</xsl:template>

<!--****************
FUNCTION
******************-->

<xsl:template match="function">
	<!-- Doc -->
	<xsl:apply-templates select="comment" />
	<xsl:text>&nl;%%</xsl:text>
	<xsl:apply-templates select="param" mode="comment" />
	<xsl:text>&nl;</xsl:text>
	<xsl:call-template name="underscorify">
		<xsl:with-param name="input"><xsl:value-of select="@name" /></xsl:with-param>
	</xsl:call-template>
	
	<!-- Params -->
	<xsl:text>(Pid,</xsl:text>
	<xsl:apply-templates select="param" mode="declaration" />
	<xsl:text>) -&foot;&nl;&tab;&tab;&tab;</xsl:text>
	
	<xsl:if test="count(./return) = 0">
		<xsl:text>gen_server:call(Pid, #cmd{type=exec, string="</xsl:text>
	</xsl:if>
	<xsl:apply-templates select="return" mode="implementation" />
	<xsl:value-of select="@name" />
	<xsl:text>", params=[</xsl:text>
	<xsl:apply-templates select="param" mode="implementation" />
	<xsl:text>]}).&nl;&nl;</xsl:text>
</xsl:template>

<!--*****************
RETURN
*******************-->

<xsl:template name="procMethod">
	<xsl:param name="type" />
	<xsl:choose>
		<xsl:when test="$type='string'">
			<xsl:text>gen_server:call(Pid, #cmd{type=string, string="</xsl:text>
		</xsl:when>
		<xsl:when test="$type='number'">
			<xsl:text>gen_server:call(Pid, #cmd{type=num, string="</xsl:text>
		</xsl:when>
		<xsl:when test="$type='boolean'">
			<xsl:text>gen_server:call(Pid, #cmd{type=boolean, string="</xsl:text>
		</xsl:when>
		<xsl:when test="$type='string[]'">
			<xsl:text>gen_server:call(Pid, #cmd{type=string_array, string="</xsl:text>
		</xsl:when>
		<xsl:when test="$type='number[]'">
			<xsl:text>gen_server:call(Pid, #cmd{type=num_array, string="</xsl:text>
		</xsl:when>
		<xsl:when test="$type='boolean[]'">
			<xsl:text>gen_server:call(Pid, #cmd{type=boolean_array, string="</xsl:text>
		</xsl:when>
		<xsl:otherwise>
			<xsl:message terminate="yes">returntype is invalid: <xsl:value-of select="$type"/></xsl:message>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<!-- In the function implementation, add "return" keyword, casting to correct type -->
<xsl:template match="return" mode="implementation">
	<xsl:call-template name="procMethod">
		<xsl:with-param name="type"><xsl:value-of select="@type" /></xsl:with-param>
	</xsl:call-template>
</xsl:template>

<!-- In the RDoc, add the <returns> tag -->
<xsl:template match="return" mode="comment">
	<xsl:text>&nl;/// &lt;returns&gt;</xsl:text>
	<xsl:call-template name="search-and-replace">
		<xsl:with-param name="input"><xsl:value-of select="."/></xsl:with-param>
		<xsl:with-param name="search-string"><xsl:text>&nl;</xsl:text></xsl:with-param>
		<xsl:with-param name="replace-string">&nl;/// </xsl:with-param>
	</xsl:call-template>
	<xsl:text>&lt;/returns&gt;</xsl:text>
</xsl:template>

<!-- In the RDoc, add the <param> tag -->
<xsl:template match="param" mode="comment">
	<xsl:text>&nl;% '</xsl:text>
	<xsl:value-of select="@name" />
	<xsl:text> is </xsl:text>
	<xsl:apply-templates />
</xsl:template>

<!-- In the function declaration, specify all String parameters -->
<xsl:template match="param" mode="declaration">
<xsl:value-of select="concat(translate(substring(@name, 1,1),'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'),substring(@name,2,string-length(@name)))"/>
	<xsl:if test="position() != last()">
		<xsl:text>,</xsl:text>
	</xsl:if>
</xsl:template>

<!-- In the function implementation, add String parameters to array -->
<xsl:template match="param" mode="implementation">
<xsl:value-of select="concat(translate(substring(@name, 1,1),'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'),substring(@name,2,string-length(@name)))"/>
	<xsl:text>,</xsl:text>
</xsl:template>

<xsl:template name="search-and-replace">
     <xsl:param name="input"/>
     <xsl:param name="search-string"/>
     <xsl:param name="replace-string"/>
     <xsl:choose>
          <!-- See if the input contains the search string -->
          <xsl:when test="$search-string and 
                           contains($input,$search-string)">
          <!-- If so, then concatenate the substring before the search
          string to the replacement string and to the result of
          recursively applying this template to the remaining substring.
          -->
               <xsl:value-of 
                    select="substring-before($input,$search-string)"/>
               <xsl:value-of select="$replace-string"/>
               <xsl:call-template name="search-and-replace">
                    <xsl:with-param name="input"
                    select="substring-after($input,$search-string)"/>
                    <xsl:with-param name="search-string" 
                    select="$search-string"/>
                    <xsl:with-param name="replace-string" 
                        select="$replace-string"/>
               </xsl:call-template>
          </xsl:when>
          <xsl:otherwise>
               <!-- There are no more occurrences of the search string so 
               just return the current input string -->
               <xsl:value-of select="$input"/>
          </xsl:otherwise>
     </xsl:choose>
</xsl:template>

<xsl:template name="underscorify">
	<xsl:param name="input" />
	<xsl:variable name="output"><xsl:value-of select="$input" /></xsl:variable>
	<!-- for-each can't handle arbitrary sequences!  
		variables can't be changed once defined!
		Welcome to copy-and-paste land! -->
	<xsl:variable name="outputa">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$output' /></xsl:with-param>
			<xsl:with-param name="search-string">A</xsl:with-param>
			<xsl:with-param name="replace-string">_a</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputb">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputa' /></xsl:with-param>
			<xsl:with-param name="search-string">B</xsl:with-param>
			<xsl:with-param name="replace-string">_b</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputc">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputb' /></xsl:with-param>
			<xsl:with-param name="search-string">C</xsl:with-param>
			<xsl:with-param name="replace-string">_c</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputd">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputc' /></xsl:with-param>
			<xsl:with-param name="search-string">D</xsl:with-param>
			<xsl:with-param name="replace-string">_d</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outpute">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputd' /></xsl:with-param>
			<xsl:with-param name="search-string">E</xsl:with-param>
			<xsl:with-param name="replace-string">_e</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputf">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outpute' /></xsl:with-param>
			<xsl:with-param name="search-string">F</xsl:with-param>
			<xsl:with-param name="replace-string">_f</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputg">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputf' /></xsl:with-param>
			<xsl:with-param name="search-string">G</xsl:with-param>
			<xsl:with-param name="replace-string">_g</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputh">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputg' /></xsl:with-param>
			<xsl:with-param name="search-string">H</xsl:with-param>
			<xsl:with-param name="replace-string">_h</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputi">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputh' /></xsl:with-param>
			<xsl:with-param name="search-string">I</xsl:with-param>
			<xsl:with-param name="replace-string">_i</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputj">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputi' /></xsl:with-param>
			<xsl:with-param name="search-string">J</xsl:with-param>
			<xsl:with-param name="replace-string">_j</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputk">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputj' /></xsl:with-param>
			<xsl:with-param name="search-string">K</xsl:with-param>
			<xsl:with-param name="replace-string">_k</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputl">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputk' /></xsl:with-param>
			<xsl:with-param name="search-string">L</xsl:with-param>
			<xsl:with-param name="replace-string">_l</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputm">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputl' /></xsl:with-param>
			<xsl:with-param name="search-string">M</xsl:with-param>
			<xsl:with-param name="replace-string">_m</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputn">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputm' /></xsl:with-param>
			<xsl:with-param name="search-string">N</xsl:with-param>
			<xsl:with-param name="replace-string">_n</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputo">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputn' /></xsl:with-param>
			<xsl:with-param name="search-string">O</xsl:with-param>
			<xsl:with-param name="replace-string">_o</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputp">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputo' /></xsl:with-param>
			<xsl:with-param name="search-string">P</xsl:with-param>
			<xsl:with-param name="replace-string">_p</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputq">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputp' /></xsl:with-param>
			<xsl:with-param name="search-string">Q</xsl:with-param>
			<xsl:with-param name="replace-string">_q</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputr">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputq' /></xsl:with-param>
			<xsl:with-param name="search-string">R</xsl:with-param>
			<xsl:with-param name="replace-string">_r</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputs">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputr' /></xsl:with-param>
			<xsl:with-param name="search-string">S</xsl:with-param>
			<xsl:with-param name="replace-string">_s</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputt">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputs' /></xsl:with-param>
			<xsl:with-param name="search-string">T</xsl:with-param>
			<xsl:with-param name="replace-string">_t</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputu">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputt' /></xsl:with-param>
			<xsl:with-param name="search-string">U</xsl:with-param>
			<xsl:with-param name="replace-string">_u</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputv">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputu' /></xsl:with-param>
			<xsl:with-param name="search-string">V</xsl:with-param>
			<xsl:with-param name="replace-string">_v</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputw">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputv' /></xsl:with-param>
			<xsl:with-param name="search-string">W</xsl:with-param>
			<xsl:with-param name="replace-string">_w</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputx">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputw' /></xsl:with-param>
			<xsl:with-param name="search-string">X</xsl:with-param>
			<xsl:with-param name="replace-string">_x</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputy">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputx' /></xsl:with-param>
			<xsl:with-param name="search-string">Y</xsl:with-param>
			<xsl:with-param name="replace-string">_y</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:variable name="outputz">
		<xsl:call-template name="search-and-replace">
			<xsl:with-param name="input"><xsl:value-of select='$outputy' /></xsl:with-param>
			<xsl:with-param name="search-string">Z</xsl:with-param>
			<xsl:with-param name="replace-string">_z</xsl:with-param>
		</xsl:call-template>
	</xsl:variable>
	<xsl:value-of select="$outputz" />
</xsl:template>


</xsl:stylesheet>

