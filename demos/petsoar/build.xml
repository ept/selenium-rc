<project name="petsoar" default="all">

    <property file="build.properties"/>

    <property name="src.java"     location="src/java"/>
    <property name="src.test"     location="src/test"/>
    <property name="src.config"   location="src/config"/>
    <property name="src.webapp"   location="src/webapp"/>

    <property name="build.dir"    location="build"/>
    <property name="build.java"   location="build/java"/>
    <property name="build.test"   location="build/test"/>
    <property name="build.war"    location="build/petsoar.war"/>

    <property name="test.results" location="build/test-results"/>

    <path id="classpath.build">
        <fileset dir="lib/runtime"/>
        <fileset dir="lib/build"/>
    </path>

    <path id="classpath.runtime">
        <fileset dir="lib/runtime"/>
    </path>

    <target name="java" description="Compile Java">
        <mkdir dir="${build.java}"/>
        <javac srcdir="${src.java}"
               destdir="${build.java}"
               classpathref="classpath.build"
               debug="true"/>
        <copy todir="${build.java}">
            <fileset dir="${src.java}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <mkdir dir="${build.test}"/>
        <javac srcdir="${src.test}"
               destdir="${build.test}"
               classpathref="classpath.build"
               classpath="${build.java}"
               debug="true"/>
        <copy todir="${build.test}">
            <fileset dir="${src.test}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="config" description="Generate and assemble configuration">
        <taskdef name="hibernatedoclet" classpathref="classpath.build"
                 classname="xdoclet.modules.hibernate.HibernateDocletTask"/>
        <hibernatedoclet destDir="${maven.build.dir}" force="true" mergeDir="${src.java}">
            <fileset dir="${src.java}">
                <include name="**/*.java"/>
            </fileset>
            <hibernate destDir="${build.java}" version="2.0"/>
        </hibernatedoclet>
        <copy todir="${build.java}">
            <fileset dir="${src.config}" excludes="hibernate.properties"/>
        </copy>
        <copy todir="${build.java}">
            <fileset dir="${src.java}" includes="**/*.xml"/>
        </copy>
    </target>

    <target name="test" depends="update-schema" description="Run unit tests">
        <mkdir dir="${test.results}"/>
        <junit haltonfailure="false" fork="true" failureproperty="tests.failed" >
            <sysproperty key="basedir" value="${test.results}"/>
            <formatter type="xml"/>
            <formatter type="plain"/>
            <formatter type="brief" usefile="false"/>
            <classpath>
                <path refid="classpath.build"/>
                <pathelement path="${build.java}"/>
                <pathelement path="${build.test}"/>
            </classpath>
            <test name="org.petsoar.AllTests" todir="${test.results}"/>
        </junit>

        <fail if="tests.failed"/>
    </target>

    <target name="war" depends="java, config" description="Create web-app WAR">
        <war destfile="${build.war}" webxml="${src.webapp}/WEB-INF/web.xml">
            <fileset dir="${src.webapp}">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
            <classes dir="${build.java}"/>
            <lib dir="lib/runtime"/>
        </war>
    </target>

    <target name="all" depends="clean,test,war"/>

    <target name="resin" description="Run application in Resin">
        <java fork="true" classname="com.caucho.server.http.HttpServer">
            <arg value="-conf"/>
            <arg value="resin.xml"/>
            <classpath>
                <fileset dir="lib/resin"/>
            </classpath>
        </java>
    </target>

    <target name="clean" description="Clean up built files">
        <delete dir="${build.dir}"/>
        <delete dir="${src.webapp}/WEB-INF/tmp"/>
        <delete dir="${src.webapp}/WEB-INF/work"/>
        <delete dir="index"/>
        <delete>
            <fileset dir=".">
                <include name="petsoardb.*"/>
            </fileset>
        </delete>

        <echo message="All clean"/>
    </target>

    <target name="import-data" depends="update-schema" description="Add some data to the database">
        <taskdef name="dbunit" classpathref="classpath.build"
                 classname="org.dbunit.ant.DbUnitTask"/>
        <dbunit driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}">
            <operation type="INSERT" src="${db.testdata}" format="flat"/>
        </dbunit>

		<!-- Create Lucene index files for the database data -->
        <java fork="true"
              classname="org.petsoar.search.lucene.OfflineLuceneIndexer"
              classpathref="classpath.build"
              classpath="${build.java}"/>

        <echo message="PetSoar sample data imported"/>
    </target>

    <target name="update-schema" depends="java, config" description="Update the database schema">

        <path id="update.schema.classpath">
            <path refid="classpath.build"/>
            <pathelement path="${build.java}"/>
        </path>

        <taskdef name="update-schema" classpathref="update.schema.classpath"
                 classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask"/>

        <update-schema quiet="no" text="no" drop="no" config="/hibernate.cfg.xml">
        </update-schema>

        <echo message="PetSoar schema updated"/>
    </target>

    <target name="diagrams" depends="java" description="Generate diagrams of application">
        <mkdir dir="build/diagrams"/>
        <java fork="true"
        	classname="org.jruby.Main"
        	classpathref="classpath.build"
        	classpath="${build.java}"
        	dir="src/ruby">
        	<arg value="diagrams.rb"/>
        </java>

        <echo message="Diagrams generated, take a look in build/diagrams"/>
    </target>

</project>
